/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/upload": {
    /** Upload Page */
    get: operations["upload_page_upload_get"];
    /**
     * Upload File 
     * @description Endpoint to upload a file.
     * 
     * Args:
     *     file (UploadFile): The uploaded file.
     * 
     * Returns:
     *     dict: The result of the file upload process.
     */
    post: operations["upload_file_upload_post"];
  };
  "/.well-known/ai-plugin.json": {
    /**
     * Get Manifest 
     * @description Endpoint to serve the manifest file.
     */
    get: operations["get_manifest__well_known_ai_plugin_json_get"];
  };
  "/.well-known/logo.png": {
    /**
     * Get Logo 
     * @description Endpoint to serve the logo file.
     */
    get: operations["get_logo__well_known_logo_png_get"];
  };
  "/.well-known/openapi.json": {
    /**
     * Get Openapi 
     * @description Endpoint to serve the OpenAPI spec generated by FastAPI.
     */
    get: operations["get_openapi__well_known_openapi_json_get"];
  };
  "/repl": {
    /**
     * Repl 
     * @description Endpoint to execute code in a REPL environment.
     * Note: This endpoint current supports a REPL-like environment for Python only.
     * 
     * Args:
     *     request (CodeExecutionRequest): The request object containing the code to execute.
     * 
     * Returns:
     *     dict: The result of the code execution.
     */
    post: operations["repl_repl_post"];
  };
  "/command": {
    /**
     * Command Endpoint 
     * @description Endpoint to execute a shell command.
     * 
     * Args:
     *     command_request (CommandExecutionRequest): The request object containing the command to execute.
     * 
     * Returns:
     *     dict: The result of the command execution.
     */
    post: operations["command_endpoint_command_post"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Body_upload_file_upload_post */
    Body_upload_file_upload_post: {
      /**
       * File 
       * Format: binary
       */
      file: string;
    };
    /**
     * CodeExecutionRequest 
     * @example {
     *   "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Define the number of vectors along each dimension\nn_vectors = 20\n\n# Define the sphere\nphi = np.linspace(0, np.pi, n_vectors)\ntheta = np.linspace(0, 2 * np.pi, n_vectors)\nphi, theta = np.meshgrid(phi, theta)\nx = np.sin(phi) * np.cos(theta)\ny = np.sin(phi) * np.sin(theta)\nz = np.cos(phi)\n\n# Define the vector field\nvx = np.sin(phi) * np.cos(theta)\nvy = np.sin(phi) * np.sin(theta)\nvz = np.cos(phi)\n\n# Create the figure\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the sphere surface\nax.plot_surface(x, y, z, color='b', alpha=0.3)\n\n# Plot the vector field\nax.quiver(x, y, z, vx, vy, vz, length=0.1, normalize=True)\n\n# Set the aspect ratio\nax.set_box_aspect([1, 1, 1])\n\nplt.savefig('static/images/vector_field.png')",
     *   "language": "python"
     * }
     */
    CodeExecutionRequest: {
      /** Code */
      code: string;
      /** Language */
      language: string;
    };
    /**
     * CommandExecutionRequest 
     * @example {
     *   "command": "echo 'import random\n\nfor i in range(1, 11):\n    uid = f\"ID{i}\"\n    random_int = random.randint(1, 100)\n    random_float = round(random.uniform(1, 100), 2)\n    print(f\"{uid},{random_int},{random_float}\")' > generate_data.py"
     * }
     */
    CommandExecutionRequest: {
      /** Command */
      command: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: (components["schemas"]["ValidationError"])[];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** Upload Page */
  upload_page_upload_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Upload File 
   * @description Endpoint to upload a file.
   * 
   * Args:
   *     file (UploadFile): The uploaded file.
   * 
   * Returns:
   *     dict: The result of the file upload process.
   */
  upload_file_upload_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_file_upload_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Manifest 
   * @description Endpoint to serve the manifest file.
   */
  get_manifest__well_known_ai_plugin_json_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get Logo 
   * @description Endpoint to serve the logo file.
   */
  get_logo__well_known_logo_png_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get Openapi 
   * @description Endpoint to serve the OpenAPI spec generated by FastAPI.
   */
  get_openapi__well_known_openapi_json_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Repl 
   * @description Endpoint to execute code in a REPL environment.
   * Note: This endpoint current supports a REPL-like environment for Python only.
   * 
   * Args:
   *     request (CodeExecutionRequest): The request object containing the code to execute.
   * 
   * Returns:
   *     dict: The result of the code execution.
   */
  repl_repl_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CodeExecutionRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Command Endpoint 
   * @description Endpoint to execute a shell command.
   * 
   * Args:
   *     command_request (CommandExecutionRequest): The request object containing the command to execute.
   * 
   * Returns:
   *     dict: The result of the command execution.
   */
  command_endpoint_command_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CommandExecutionRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
